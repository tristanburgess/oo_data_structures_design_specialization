package textgen;

import java.util.AbstractList;


/** A class that implements a doubly linked list
 * 
 * @author UC San Diego Intermediate Programming MOOC team
 *
 * @param <E> The type of the elements stored in the list
 */
public class MyLinkedList<E> extends AbstractList<E> {
	LLNode<E> head;
	LLNode<E> tail;
	int size;

	/** Create a new empty LinkedList */
	public MyLinkedList() {
		this.head = new LLNode<E>();
		this.tail = new LLNode<E>();
		this.head.next = this.tail;
		this.tail.prev = this.head;
		this.size = 0;
	}

	/**
	 * Appends an element to the end of the list
	 * @param element The element to add
	 */
	public boolean add(E element) 
	{
		try {
			LLNode<E> newE = new LLNode<E>(element);
			
			this.tail.prev.next = newE;
			newE.prev = this.tail.prev;
			this.tail.prev = newE;
			newE.next = this.tail;
			
			this.size++;
			
			return true;
		} catch (Exception e) {
			return false;
		}	
	}

	/** Get the element at position index 
	 * @throws IndexOutOfBoundsException if the index is out of bounds. */
	public E get(int index) 
	{
		if (index >= size || index < 0) {
			throw new IndexOutOfBoundsException();
		}
		
		LLNode<E> out = this.head;
		
		for (int i = 0; i <= index; ++i) {
			out = out.next;
		}
		
		return out.data;
	}

	/**
	 * Add an element to the list at the specified index
	 * @param The index where the element should be added
	 * @param element The element to add
	 */
	public void add(int index, E element) 
	{
		LLNode<E> newE = new LLNode<E>(element);
		LLNode<E> futureNext = this.head;
		
		for (int i = 0; i <= index; ++i) {
			futureNext = futureNext.next;
		}
		
		futureNext.prev.next = newE;
		newE.prev = futureNext.prev;
		futureNext.prev = newE;
		newE.next = futureNext;
		
		this.size++;
	}


	/** Return the size of the list */
	public int size() 
	{
		return this.size;
	}

	/** Remove a node at the specified index and return its data element.
	 * @param index The index of the element to remove
	 * @return The data element removed
	 * @throws IndexOutOfBoundsException If index is outside the bounds of the list
	 * 
	 */
	public E remove(int index) 
	{
		if (index >= size || index < 0) {
			throw new IndexOutOfBoundsException();
		}
		
		LLNode<E> toRem = this.head;
		
		for (int i = 0; i <= index; ++i) {
			toRem = toRem.next;
		}
		
		E data = toRem.data;
		toRem.prev.next = toRem.next;
		toRem.next.prev = toRem.prev;		
		toRem = null;
		this.size--;
		
		return data;
	}

	/**
	 * Set an index position in the list to a new element
	 * @param index The index of the element to change
	 * @param element The new element
	 * @return The element that was replaced
	 * @throws IndexOutOfBoundsException if the index is out of bounds.
	 */
	public E set(int index, E element) 
	{
		if (index >= size || index < 0) {
			throw new IndexOutOfBoundsException();
		}
		
		if (element == null) {
			throw new Exception();
		}
		
		LLNode<E> toEdit = this.head;
		
		for (int i = 0; i <= index; ++i) {
			toEdit = toEdit.next;
		}
		
		toEdit.data = element;
		
		return toEdit.data;
	}   
}

class LLNode<E> 
{
	LLNode<E> prev;
	LLNode<E> next;
	E data;

	// TODO: Add any other methods you think are useful here
	// E.g. you might want to add another constructor

	public LLNode(E e) 
	{
		this.data = e;
		this.prev = null;
		this.next = null;
	}
	
	public LLNode() 
	{
		this.data = null;
		this.prev = null;
		this.next = null;
	}

}
